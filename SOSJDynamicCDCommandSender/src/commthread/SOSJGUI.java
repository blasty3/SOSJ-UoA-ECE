/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package commthread;

import SOAHandler.Support.SJRegistryEntry;
import static commthread.SOSJDynamicCDCommandSender.ParseCDMap;
import static commthread.SOSJDynamicCDCommandSender.ParseServDesc;
import java.awt.TextField;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.StreamCorruptedException;
import java.net.BindException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoundedRangeModel;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JTextField;
import org.json.me.JSONException;
import org.json.me.JSONObject;
import org.json.me.JSONTokener;

/**
 *
 * @author Udayanto
 */
public class SOSJGUI extends javax.swing.JFrame implements Runnable{

    String DevelAddress;
    
    private InetAddress address;
	private int port;
	
	private int readlength = 0;
	private int buffer_length = 0;
	private ServerSocket serverSocket = null;
    
    /**
     * Creates new form SJSOAGUI
     */
    public SOSJGUI(String DevelAddress) {
        this.DevelAddress = DevelAddress;
        initComponents();
        //runSocket();
        //StartOtherComponents();
    }
    
    /*
        public void runSocket()
	{
		try
		{
			//serverSocket = new ServerSocket(212, 50, InetAddress.getByName(DevelAddress));
			//while(active){
                            MulticastSocket socket = new MulticastSocket(198);
                            //try{
                                //serverSocket.setSoTimeout(7000);
				//Socket socket = serverSocket.accept();
				//new Thread(new Worker(socket)).start(); 
                                new Thread(new Worker(socket)).start(); 
                            //} 
                               
			//}
                       
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

        */
    /*
    private void StartOtherComponents(){
        JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

    BoundedRangeModel brmHoriz = textfield.getHorizontalVisibility();
    scrollBarHoriz.setModel(brmHoriz);
    
    //scrollBarHoriz.setModel(brmHoriz);
    panel.add(textfield);
    panel.add(scrollBarHoriz);
    }
    */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTransmitCommandButton1 = new javax.swing.JButton();
        jCommandChoiceButton = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jCDNameLabel = new javax.swing.JLabel();
        jCDConfigLabel = new javax.swing.JLabel();
        jMigTypeField = new javax.swing.JTextField();
        jCDServiceDescriptionLabel = new javax.swing.JLabel();
        jCDServDescField = new javax.swing.JTextField();
        jSSNameLabel = new javax.swing.JLabel();
        jSSNameField = new javax.swing.JTextField();
        jSSAddrLabel = new javax.swing.JLabel();
        jCDNameField = new javax.swing.JTextField();
        jMigTypeLabel = new javax.swing.JLabel();
        jChanNameField = new javax.swing.JTextField();
        jChanNameLabel = new javax.swing.JLabel();
        jMigSSDestLabel = new javax.swing.JLabel();
        jMigSSDestField = new javax.swing.JTextField();
        jCDConfigField = new javax.swing.JTextField();
        jChanDirLabel = new javax.swing.JLabel();
        jChanDirField = new javax.swing.JTextField();
        jPartChanCDNameLabel = new javax.swing.JLabel();
        jPartChanNameLabel = new javax.swing.JLabel();
        jPartChanNameField = new javax.swing.JTextField();
        jPartChanCDNameField = new javax.swing.JTextField();
        jSSTargetAddressField = new javax.swing.JTextField();
        jSSAddrLabel1 = new javax.swing.JLabel();
        jDiscoverButton2 = new javax.swing.JButton();
        jSSAddrLabel2 = new javax.swing.JLabel();
        jRegCDContentScrollField = new javax.swing.JScrollPane();
        jRegCDField = new javax.swing.JTextArea();
        jRegContentScrollPane = new javax.swing.JScrollPane();
        jRegContentField = new javax.swing.JTextArea();
        jStopAutoQueryButton = new javax.swing.JButton();
        jStartAutoQueryButton = new javax.swing.JButton();
        jAutoQueryPeriodField = new javax.swing.JTextField();
        jAutoQueryPeriodLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("SOSJ Monitoring");

        jLabel2.setText("Command");

        jTransmitCommandButton1.setText("Transmit Command");
        jTransmitCommandButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTransmitCommandButton1ActionPerformed(evt);
            }
        });

        jCommandChoiceButton.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose Command...", "CreateCD", "SuspendCD", "WakeUpCD", "KillCD", "MigrateCD", "ReconfigChan" }));
        jCommandChoiceButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCommandChoiceButtonItemStateChanged(evt);
            }
        });
        jCommandChoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCommandChoiceButtonActionPerformed(evt);
            }
        });
        jCommandChoiceButton.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jCommandChoiceButtonPropertyChange(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Arguments");

        jCDNameLabel.setText("CD Name");

        jCDConfigLabel.setText("CD Config");

        jMigTypeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMigTypeFieldActionPerformed(evt);
            }
        });

        jCDServiceDescriptionLabel.setText("CD Service Description");

        jCDServDescField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCDServDescFieldActionPerformed(evt);
            }
        });

        jSSNameLabel.setText("SS Name");

        jSSNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSSNameFieldActionPerformed(evt);
            }
        });

        jSSAddrLabel.setText("SS Address");

        jCDNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCDNameFieldActionPerformed(evt);
            }
        });

        jMigTypeLabel.setText("Migration Type");

        jChanNameLabel.setText("Channel Name");

        jMigSSDestLabel.setText("Migration SS Destination");

        jMigSSDestField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMigSSDestFieldActionPerformed(evt);
            }
        });

        jCDConfigField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCDConfigFieldActionPerformed(evt);
            }
        });

        jChanDirLabel.setText("Channel Direction");

        jPartChanCDNameLabel.setText("Partner Channel CD Name");

        jPartChanNameLabel.setText("Partner Channel Name");

        jPartChanCDNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPartChanCDNameFieldActionPerformed(evt);
            }
        });

        jSSAddrLabel1.setText("Registry Content");

        jDiscoverButton2.setText("Query");
        jDiscoverButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDiscoverButton2ActionPerformed(evt);
            }
        });

        jSSAddrLabel2.setText("Registered CD");

        jRegCDContentScrollField.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jRegCDContentScrollField.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jRegCDField.setEditable(false);
        jRegCDField.setColumns(20);
        jRegCDField.setRows(5);
        jRegCDContentScrollField.setViewportView(jRegCDField);

        jRegContentScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jRegContentScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jRegContentField.setEditable(false);
        jRegContentField.setColumns(20);
        jRegContentField.setRows(5);
        jRegContentScrollPane.setViewportView(jRegContentField);

        jStopAutoQueryButton.setText("Stop Auto Query");
        jStopAutoQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStopAutoQueryButtonActionPerformed(evt);
            }
        });

        jStartAutoQueryButton.setText("Start Auto Query");
        jStartAutoQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStartAutoQueryButtonActionPerformed(evt);
            }
        });

        jAutoQueryPeriodField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAutoQueryPeriodFieldActionPerformed(evt);
            }
        });

        jAutoQueryPeriodLabel.setText("Query Period");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jAutoQueryPeriodLabel)
                .addGap(18, 18, 18)
                .addComponent(jAutoQueryPeriodField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jStartAutoQueryButton)
                .addGap(38, 38, 38)
                .addComponent(jStopAutoQueryButton)
                .addGap(99, 99, 99))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(39, 39, 39)
                                    .addComponent(jMigTypeLabel))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addContainerGap()
                                            .addComponent(jSSNameLabel)
                                            .addGap(27, 27, 27))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(39, 39, 39)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jCDNameLabel)
                                                .addComponent(jCDConfigLabel))
                                            .addGap(47, 47, 47)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jSSNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jCDConfigField)
                                        .addComponent(jCDNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jPartChanNameLabel)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(23, 23, 23)
                                                        .addComponent(jChanNameLabel)))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jChanNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jPartChanNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(27, 27, 27)
                                                    .addComponent(jChanDirLabel)
                                                    .addGap(32, 32, 32)
                                                    .addComponent(jChanDirField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jPartChanCDNameLabel)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jPartChanCDNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(51, 51, 51)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSSAddrLabel1)
                                            .addComponent(jSSAddrLabel2)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jMigSSDestLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jMigTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jMigSSDestField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jTransmitCommandButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jCDServiceDescriptionLabel)
                                .addGap(18, 18, 18)
                                .addComponent(jCDServDescField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRegCDContentScrollField, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jRegContentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addComponent(jSSTargetAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDiscoverButton2)
                                .addGap(66, 66, 66))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSSAddrLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCommandChoiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(274, 274, 274)
                        .addComponent(jLabel1)))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCommandChoiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSSNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSSNameLabel)
                    .addComponent(jSSAddrLabel)
                    .addComponent(jSSTargetAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCDNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCDNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRegContentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 287, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCDConfigLabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCDConfigField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSSAddrLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCDServDescField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCDServiceDescriptionLabel))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jMigTypeLabel)
                            .addComponent(jMigTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jMigSSDestLabel)
                            .addComponent(jMigSSDestField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jChanNameLabel)
                                    .addComponent(jChanNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jPartChanNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPartChanNameLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jChanDirLabel)
                                    .addComponent(jChanDirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jPartChanCDNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPartChanCDNameLabel))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRegCDContentScrollField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSSAddrLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jDiscoverButton2)
                                    .addComponent(jTransmitCommandButton1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jStopAutoQueryButton)
                                    .addComponent(jAutoQueryPeriodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jAutoQueryPeriodLabel)
                                    .addComponent(jStartAutoQueryButton))
                                .addGap(21, 21, 21))))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTransmitCommandButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTransmitCommandButton1ActionPerformed
        // TODO add your handling code here:
        //send command via UDP
        //jTextArea1.setText(RegistryDisplayUpdater()); 
        
        MessageGenerator msggen = new MessageGenerator();
        
        if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("CreateCD")){
           
            String SSName = jSSNameField.getText();
           // String DevelAddr = DevelAddress;
//jDevelAddressField.getText();
            String SSAddr = jSSTargetAddressField.getText();
            String CDName = jCDNameField.getText();
            String CDConfig = jCDConfigField.getText();
            String CDServDesc =  jCDServDescField.getText();
            
            
            
            JSONObject jsCDMap = ParseCDMap(CDName, CDConfig);
            JSONObject jsCDServDesc = ParseServDesc(CDServDesc);
            
            JSONObject jsMsg =  msggen.GenerateMessageOfJSON("CreateCD", DevelAddress,SSName,CDName, jsCDMap, jsCDServDesc);
            
            Thread commsend = new Thread(new CommandSenderThread(SSAddr, jsMsg));
                                commsend.start();
            
        } else if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("KillCD")){
           
             String SSName = jSSNameField.getText();
            //String DevelAddress = jDevelAddressField.getText();
            String SSAddr = jSSTargetAddressField.getText();
            String CDName = jCDNameField.getText();
           
            
           JSONObject jsMsg = msggen.GenerateMessageOfJSON("KillCD", DevelAddress,SSName,CDName);
            
           CommandSender commsend = new CommandSender(SSAddr, jsMsg);
                                commsend.run();
           
        }
        
        else if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("SuspendCD")){
            String SSName = jSSNameField.getText();
            //String DevelAddress = jDevelAddressField.getText();
            String SSAddr = jSSTargetAddressField.getText();
            String CDName = jCDNameField.getText();
           
            
           JSONObject jsMsg = msggen.GenerateMessageOfJSON("SuspendCD", DevelAddress,SSName,CDName);
           
           CommandSender commsend = new CommandSender(SSAddr, jsMsg);
           commsend.run();
           
          }  else if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("WakeUpCD")){
           
            String SSName = jSSNameField.getText();
            //String DevelAddress = jDevelAddressField.getText();
            String SSAddr = jSSTargetAddressField.getText();
            String CDName = jCDNameField.getText();
           
            
           JSONObject jsMsg = msggen.GenerateMessageOfJSON("WakeUpCD", DevelAddress,SSName,CDName);
           CommandSender commsend = new CommandSender(SSAddr, jsMsg);
           commsend.run();
           
        } else if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("MigrateCD")){
            
            String SSName = jSSNameField.getText();
            //String DevelAddress = jDevelAddressField.getText();
            String SSAddr = jSSTargetAddressField.getText();
            String CDName = jCDNameField.getText();
            
            String MigType = jMigTypeField.getText();
            String MigSSDest = jMigSSDestField.getText();
            
            String CDConfig = jCDConfigField.getText();
            String CDServDesc =  jCDServDescField.getText();
            
            JSONObject jsCDMap = ParseCDMap(CDName, CDConfig);
            JSONObject jsCDServDesc = ParseServDesc(CDServDesc);
            
            JSONObject jsMsg = msggen.GenerateMessageOfJSON("MigrateCD", DevelAddress,SSName, CDName,MigSSDest, MigType, jsCDMap, jsCDServDesc);
            
            CommandSender commsend = new CommandSender(SSAddr, jsMsg);
            commsend.run();
            
            
        } else if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("ReconfigChan")){
            
            String SSName = jSSNameField.getText();
            //String DevelAddress = jDevelAddressField.getText();
            String SSAddr = jSSTargetAddressField.getText();
            String CDName = jCDNameField.getText();
            
            String ChanName = jChanNameField.getText();
            String ChanDir = jChanDirField.getText();
            String PartnerChanName = jPartChanNameField.getText();
            String PartnerChanCDName = jPartChanCDNameField.getText();
            
            JSONObject jsMsg = msggen.GenerateReconfigChanMessageOfJSON("ReconfigChan", DevelAddress,SSName, CDName, ChanName, ChanDir, PartnerChanCDName, PartnerChanName);
            
            CommandSender commsend = new CommandSender(SSAddr, jsMsg);
            commsend.run();
            
        }
        
    }//GEN-LAST:event_jTransmitCommandButton1ActionPerformed

    private void jCommandChoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCommandChoiceButtonActionPerformed
        // TODO add your handling code here:
        if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("CreateCD")){
            jMigTypeField.setEnabled(false);
            jMigTypeLabel.setEnabled(false);
            jMigSSDestField.setEnabled(false);
            jMigSSDestLabel.setEnabled(false);
            jChanNameField.setEnabled(false);
            jChanNameLabel.setEnabled(false);
            jPartChanNameLabel.setEnabled(false);
            jPartChanNameField.setEnabled(false);
            jPartChanCDNameLabel.setEnabled(false);
            jPartChanCDNameField.setEnabled(false);
            jCDConfigLabel.setEnabled(true);
            jCDConfigField.setEnabled(true);
            jCDServDescField.setEnabled(true);
            jCDServiceDescriptionLabel.setEnabled(true);
            jChanDirLabel.setEnabled(false);
            jChanDirField.setEnabled(false);
        } else if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("KillCD")){
            jCDConfigLabel.setEnabled(false);
            jCDConfigField.setEnabled(false);
            jCDServDescField.setEnabled(false);
            jCDServiceDescriptionLabel.setEnabled(false);
            
            jMigTypeField.setEnabled(false);
            jMigTypeLabel.setEnabled(false);
            jMigSSDestField.setEnabled(false);
            jMigSSDestLabel.setEnabled(false);
            jChanNameField.setEnabled(false);
            jChanNameLabel.setEnabled(false);
            jPartChanNameLabel.setEnabled(false);
            jPartChanNameField.setEnabled(false);
            jPartChanCDNameLabel.setEnabled(false);
            jPartChanCDNameField.setEnabled(false);
            jChanDirLabel.setEnabled(false);
            jChanDirField.setEnabled(false);
        }
        
        else if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("SuspendCD")){
            jCDConfigLabel.setEnabled(false);
            jCDConfigField.setEnabled(false);
            jCDServDescField.setEnabled(false);
            jCDServiceDescriptionLabel.setEnabled(false);
            
            jMigTypeField.setEnabled(false);
            jMigTypeLabel.setEnabled(false);
            jMigSSDestField.setEnabled(false);
            jMigSSDestLabel.setEnabled(false);
            jChanNameField.setEnabled(false);
            jChanNameLabel.setEnabled(false);
            jPartChanNameLabel.setEnabled(false);
            jPartChanNameField.setEnabled(false);
            jPartChanCDNameLabel.setEnabled(false);
            jPartChanCDNameField.setEnabled(false);
            jChanDirLabel.setEnabled(false);
            jChanDirField.setEnabled(false);
          }  else if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("WakeUpCD")){
            jCDConfigLabel.setEnabled(false);
            jCDConfigField.setEnabled(false);
            jCDServDescField.setEnabled(false);
            jCDServiceDescriptionLabel.setEnabled(false);
            
            jMigTypeField.setEnabled(false);
            jMigTypeLabel.setEnabled(false);
            jMigSSDestField.setEnabled(false);
            jMigSSDestLabel.setEnabled(false);
            jChanNameField.setEnabled(false);
            jChanNameLabel.setEnabled(false);
            jPartChanNameLabel.setEnabled(false);
            jPartChanNameField.setEnabled(false);
            jPartChanCDNameLabel.setEnabled(false);
            jPartChanCDNameField.setEnabled(false);
            jChanDirLabel.setEnabled(false);
            jChanDirField.setEnabled(false);
        } else if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("MigrateCD")){
            jCDConfigLabel.setEnabled(true);
            jCDConfigField.setEnabled(true);
            jCDServDescField.setEnabled(true);
            jCDServiceDescriptionLabel.setEnabled(true);
            
            jMigTypeField.setEnabled(true);
            jMigTypeLabel.setEnabled(true);
            jMigSSDestField.setEnabled(true);
            jMigSSDestLabel.setEnabled(true);
            jChanNameField.setEnabled(false);
            jChanNameLabel.setEnabled(false);
            jPartChanNameLabel.setEnabled(false);
            jPartChanNameField.setEnabled(false);
            jPartChanCDNameLabel.setEnabled(false);
            jPartChanCDNameField.setEnabled(false);
            jChanDirLabel.setEnabled(false);
            jChanDirField.setEnabled(false);
        } else if(jCommandChoiceButton.getSelectedItem().toString().equalsIgnoreCase("ReconfigChan")){
            jCDConfigLabel.setEnabled(false);
            jCDConfigField.setEnabled(false);
            jCDServDescField.setEnabled(false);
            jCDServiceDescriptionLabel.setEnabled(false);
            
            jMigTypeField.setEnabled(false);
            jMigTypeLabel.setEnabled(false);
            jMigSSDestField.setEnabled(false);
            jMigSSDestLabel.setEnabled(false);
            jChanNameField.setEnabled(true);
            jChanNameLabel.setEnabled(true);
            jPartChanNameLabel.setEnabled(true);
            jPartChanNameField.setEnabled(true);
            jPartChanCDNameLabel.setEnabled(true);
            jPartChanCDNameField.setEnabled(true);
            jChanDirLabel.setEnabled(true);
            jChanDirField.setEnabled(true);
        }
    }//GEN-LAST:event_jCommandChoiceButtonActionPerformed

    private void jCommandChoiceButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCommandChoiceButtonItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jCommandChoiceButtonItemStateChanged

    private void jCommandChoiceButtonPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jCommandChoiceButtonPropertyChange
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jCommandChoiceButtonPropertyChange

    private void jSSNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSSNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jSSNameFieldActionPerformed

    private void jCDNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCDNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCDNameFieldActionPerformed

    private void jPartChanCDNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPartChanCDNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPartChanCDNameFieldActionPerformed

    private void jCDConfigFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCDConfigFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCDConfigFieldActionPerformed

    private void jMigTypeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMigTypeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMigTypeFieldActionPerformed

    private void jDiscoverButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDiscoverButton2ActionPerformed
        // TODO add your handling code here:\
        
       jDiscoverButton2.setEnabled(false);
       jStartAutoQueryButton.setEnabled(false);
        
       Thread commGUIQueryTh = new Thread(new SOSJCommGUIQueryTh(DevelAddress, jRegContentField.getText(), jRegCDField.getText()));
        
       commGUIQueryTh.start();
       
       while(!SOSJCommandGUIMailbox.GetQueryFinishedStat()){
           
       }
       
       JSONObject newServReg = SOSJCommandGUIMailbox.GetQueriedServRegRes();
       JSONObject newCDStats = SOSJCommandGUIMailbox.GetQueriedRegCDRes();
       
        try {
            jRegContentField.setText(newServReg.toPrettyPrintedString(2, 0));
            jRegCDField.setText(newCDStats.toPrettyPrintedString(2,0));
        } catch (JSONException ex) {
            ex.printStackTrace();
        }
        
       jDiscoverButton2.setEnabled(true);
       jStartAutoQueryButton.setEnabled(true); 
        
    }//GEN-LAST:event_jDiscoverButton2ActionPerformed

    private void jMigSSDestFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMigSSDestFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMigSSDestFieldActionPerformed

    private void jStopAutoQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStopAutoQueryButtonActionPerformed
        // TODO add your handling code here:
        jAutoQueryPeriodLabel.setEnabled(true);
        jAutoQueryPeriodField.setEnabled(true);
        jStartAutoQueryButton.setEnabled(true);
        jStopAutoQueryButton.setEnabled(false);
        jDiscoverButton2.setEnabled(true);
        SOSJCommandGUIMailbox.SetAutoQueryEnabledStat(false);
    }//GEN-LAST:event_jStopAutoQueryButtonActionPerformed

    private void jStartAutoQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStartAutoQueryButtonActionPerformed
        // TODO add your handling code here:
        jAutoQueryPeriodLabel.setEnabled(false);
        jAutoQueryPeriodField.setEnabled(false);
        jStartAutoQueryButton.setEnabled(false);
        jStopAutoQueryButton.setEnabled(true);
        jDiscoverButton2.setEnabled(false);
        SOSJCommandGUIMailbox.SetAutoQueryEnabledStat(true);
        
        long period = Long.parseLong(jAutoQueryPeriodField.getText());
        
        Thread AutoQueryth = new Thread(new AutoQueryThread(DevelAddress, jRegContentField.getText(), jRegCDField.getText(),period));
        
        AutoQueryth.start();
        
    }//GEN-LAST:event_jStartAutoQueryButtonActionPerformed

    private void jAutoQueryPeriodFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAutoQueryPeriodFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jAutoQueryPeriodFieldActionPerformed

    private void jCDServDescFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCDServDescFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCDServDescFieldActionPerformed

    
    
    class Worker implements Runnable {

		public MulticastSocket s;
		public Worker (MulticastSocket s){  this.s = s;}
		@Override
		public void run() {
			//Object[] list = new Object[2];
                    while(true){
                        
                        try{
                        
                        JSONObject jsMsg = new JSONObject();
                    
                                    byte data[];
                                    
                                    byte packet[] = new byte[8096];
                                    DatagramPacket pack = new DatagramPacket(packet, packet.length);
                                        
                                        //System.out.println("Own IP: "+SJServiceRegistry.getOwnIPAddressFromRegistry());
                                        //while (true){
                                           // pack = new DatagramPacket(packet, packet.length);
                                    
                                        //if (socket==null ) {
                                        //socket.setLoopbackMode(true);
                                       // }
                                        //if (infoDebug==1) System.out.println("wait for message");
                                        
                                           
                                            //s.setSoTimeout(2500);
                                            s.receive(pack);
                                            //socket.setSoTimeout(2500);
                                            //socket.receive(pack);
                                            
                                           // if (!pack.getAddress().getHostAddress().equalsIgnoreCase(SJServiceRegistry.getOwnIPAddressFromRegistry())){
                                            //    break;
                                            //}
                                            
                                        
                                        
                                        
                                        // packet[] is received here
                                        
                                        
                                        
                                        //need to ignore message coming from its own
                                        
                                   //    if (!pack.getAddress().toString().contains(SJServiceRegistry.getOwnIPAddressFromRegistry())){
                                            
                                                //if(infoDebug == 1) System.out.println("SOA MessageReceiverThread received pack length = " + pack.getLength() + ", from " + pack.getSocketAddress()+ "port" +pack.getPort());
                                                data = new byte[pack.getLength()];
                                                
                                                //String localSSName = SJSSCDSignalChannelMap.getLocalSSName();
                                                
                                                System.arraycopy(packet, 0, data, 0, pack.getLength());
     
                                                if(data.length > 0)
                                                {
                                                        if(((int)data[0] == -84) && ((int)data[1] == -19))
                                                        {
                                                                try
                                                                {
                                                                        //if(infoDebug == 1) System.out.println("Java built-in deserializer is used");
                                                                        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));
                                                                        Object mybuffer = ois.readObject();              
                                                                        //if(infoDebug == 1) System.out.println(mybuffer);
                                                                        //if(infoDebug == 1) System.out.println((mybuffer.getClass()).getName());
                                                                        if((mybuffer.getClass()).getName().compareTo("[Ljava.lang.Object;") == 0)
                                                                        {
                                                                                Object mybufferArray[] = (Object[])mybuffer;
                                                                                // System.out.println(mybufferArray.length);	
                                                                        }
                                                                        else
                                                                        {
                                                                           //if(infoDebug == 1) System.out.println("Direct assign the received byffer to the value 3");


                                                                            //expected format in JSON String
                                                                             //if (infoDebug==1) System.out.println("received info in SOA receiver: " +mybuffer.toString().trim()+"\n");
                                                                              
                                                                              jsMsg = new JSONObject(new JSONTokener(mybuffer.toString().trim()));
                                                                              
                                                                              //String targetSS = js.getString("targetSS");
                                                                              
                                                                              //if (debug==1) System.out.println("UDPSOAReceiver, from:" +sourceSS+" Received service:" +js.toPrettyPrintedString(2, 0));
                                                                              
                                                                              //System.out.println("MessageReceiverThread, sourceSS:" +sourceSS+ "LocalSSName: " +localSSName+ " Receive msg: " +js.toPrettyPrintedString(2, 0));
                                                                              
                                                                              //System.out.println("SOSJDiscoveryReply, Receive msg: " +js.toPrettyPrintedString(2, 0));
                                                                              JSONObject jsCDStats = jsMsg.getJSONObject("CDStats");
                                                                            JSONObject jsServList = jsMsg.getJSONObject("serviceList");

                                                                            String currRegCont = jRegContentField.getText();
                                                                            String currRegCD = jRegCDField.getText();
                                                                            
                                                                            if(currRegCont.equalsIgnoreCase("") || currRegCont.equalsIgnoreCase("{}")){
                                                                                
                                                                                jRegContentField.setText(jsServList.toString());
                                                                            } else {
                                                                                JSONObject jsCurrRegCont = new JSONObject(new JSONTokener(currRegCont));
                                                                                
                                                                                Enumeration keysJsServList = jsServList.keys();
                                                                                
                                                                                while(keysJsServList.hasMoreElements()){
                                                                                    String ServListIndiv = keysJsServList.nextElement().toString();
                                                                                    
                                                                                    jsCurrRegCont.put(ServListIndiv, jsServList.getJSONObject(ServListIndiv));
                                                                                    
                                                                                }
                                                                                
                                                                                jRegContentField.setText(jsCurrRegCont.toString());
                                                                                
                                                                            }
                                                                            
                                                                             if(currRegCD.equalsIgnoreCase("") || currRegCD.equalsIgnoreCase("{}")){
                                                                                
                                                                                 jRegCDField.setText(jsCDStats.toString());
                                                                                 
                                                                            } else {
                                                                                JSONObject jsCurrRegCD = new JSONObject(new JSONTokener(currRegCD));
                                                                                
                                                                                Enumeration keysJsCDStats = jsCDStats.keys();
                                                                                
                                                                                while(keysJsCDStats.hasMoreElements()){
                                                                                    String CDStatIndiv = keysJsCDStats.nextElement().toString();
                                                                                    
                                                                                    jsCurrRegCD.put(CDStatIndiv, jsServList.getJSONObject(CDStatIndiv));
                                                                                    
                                                                                }
                                                                                
                                                                                jRegCDField.setText(jsCurrRegCD.toString());
                                                                            }
                                                                            
                                                                            //jRegContentField.setText(jsServList.toString());
                                                                            //jRegCDField.setText(jsCDStats.toString());
                                                                              
                                                                                       //list[1]="{}";

                                                                                     //automatically service registry update --> registry of external service
                                                                                     // SJServiceRegistry.AppendNodeServicesToCurrentRegistry(jsData, false);

                                                                        }

                                                                }
                                                                catch(Exception e)
                                                                {
                                                                    //System.out.println(e.getCause());
                                                                        e.printStackTrace();
                                                                }
                                                                
                                                        }
                                                        
                                                }
                                         //}
                                                
                                            
                                        
                                       
                                        // own-IP check ends here
                                        
                                             
                                                //socket.close();
                                        //socket.close();
                                       
                                       s.close();
                        
                        } catch(Exception ex){
                             ex.printStackTrace();
                        }
                        
                    }
                    
                    
		}
	}
    
    
    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SOSJGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SOSJGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SOSJGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SOSJGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
                
                
                new SOSJGUI(DevelAddress).setVisible(true);
            }
            
            private void RegistryDisplayUpdater(){
                //try {
                    //String AllReg = SJServiceRegistry.obtainCurrentRegistry().toString();
                //    return AllReg;
                //} catch (JSONException ex) {
                //    System.out.println("SJSOAGUI, JSONException: " +ex.getCause());
                //    return "{}";
                //}
            }
            
            private JSONObject TransmitDiscMsg(String regID, String regAddr){
        
         //DatagramSocket socket = new DatagramSocket(188);
         //s = new DatagramSocket(199);
        
        JSONObject js = new JSONObject();
        
        //SJSOAMessage sjdisc = new SJSOAMessage();
        
        DatagramSocket s1 = null;
        //MulticastSocket s = null;
        
        try{
             
        
                    int infoDebug=0;

                    //DatagramSocket s = new DatagramSocket(199);
                    //MulticastSocket s2 = new MulticastSocket(199);
                    s1 = new DatagramSocket(199);
                    //s = new MulticastSocket(198);
                    
                                String message = ConstructNoP2PServToRegDiscoveryMessage(DevelAddress,regID);
                                //while(true){
                                
                                InetAddress ipAddress = InetAddress.getByName(regAddr);
                                       if (infoDebug ==1 ) System.out.println("BroadcastMessage send stage 1");
                                       byte[] msg = new byte[8096];
                                      //ipAddress=InetAddress.getByName("192.168.1.255"); //assumed broadcast address
                                      //ipAddress = InetAddress.getByName(super.buffer[1].toString());
                                       
                                       if (infoDebug ==1 ) System.out.println("BroadcastMessage send stage 2");
                                       
                                       
                                       if (infoDebug ==1 ) System.out.println("BroadcastMessage send stage 3");
                                               //SJServiceRegistry.ConstructBroadcastDiscoveryMessage("AllNodes").toString();
                                       
                                       //MulticastSocket s = new MulticastSocket(SJServiceRegistry.getMessageTransmissionPort(SJServiceRegistry.getMessage("BroadcastDiscoveryMessage")));
                                       
                                       
                                       ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
                                       
                                       //DatagramSocket s = new DatagramSocket(SJServiceRegistry.getMessageTransmissionPort(SJServiceRegistry.getMessage("BroadcastDiscoveryMessage")));
                                      
                                       //DatagramPacket hi = new DatagramPacket(msg.getBytes(), msg.length(), group, Integer.parseInt(str[1]));
                                       
                                       ObjectOutputStream out = new ObjectOutputStream(new BufferedOutputStream(byteStream));
                                     //out.writeObject(SJServiceRegistry.obtainInternalRegistry().toString());
                                       out.writeObject(message); //put service description to be sent to remote devices
                                       out.flush();
                                       if (infoDebug ==1 ) System.out.println("BroadcastMessage send stage 4");
                                       msg = byteStream.toByteArray();
                                       out.close();
                                       if (infoDebug ==1 ) System.out.println("BroadcastMessage send stage 5");
                                       
                                       System.out.println("SOSJDiscovery, transmitting discovery message: " +message);
                                       
                                       DatagramPacket hi = new DatagramPacket(msg, msg.length, ipAddress, 199);
                                       if (infoDebug ==1 ) System.out.println("Sending BroadcastDiscoveryMessage");
                                       s1.send(hi);
                                       if (infoDebug ==1 )System.out.println("data has been sent!");
                                       
                                      // if(regAddr.equals("224.0.0.100")){
                                       //    s.joinGroup(InetAddress.getByName("224.0.0.100"));
                                       //}
                                       byte data[];
                                    
                                    byte packet2[] = new byte[8096];
                                    DatagramPacket pack2 = new DatagramPacket(packet2, packet2.length);
                                        
                                        //System.out.println("Own IP: "+SJServiceRegistry.getOwnIPAddressFromRegistry());
                                        //while (true){
                                           // pack = new DatagramPacket(packet, packet.length);
                                    
                                        //if (socket==null ) {
                                        //socket.setLoopbackMode(true);
                                       // }
                                        if (infoDebug==1) System.out.println("wait for message");
                                        
                                           
                                            s1.setSoTimeout(2500);
                                            s1.receive(pack2);
                                      
                                       s1.close();

                    } catch (BindException bex){
                        System.out.println("Discovery and DiscReply ports have been bound and currently used by another CD");
                        //bex.printStackTrace();
                        
                        //s.close();
                        s1.close();
                    } catch (SocketTimeoutException stex){
                        System.out.println("Disc Reply message Timeout");
                        
                        //stex.printStackTrace();
                       
                        //s.close();
                        s1.close();
                    }
                        catch (IOException iex){
                        System.out.println("Discovery and DiscReply communication problem, check for possible disconnection");
                         iex.printStackTrace();
                        
                         //s.close();
                         s1.close();
                    }
                        
                                //} // end of main while loop
                        
                   return js;
        
    }
    
    private String ConstructNoP2PServToRegDiscoveryMessage(String DevelAddr, String regID){
       
        JSONObject jsDiscMsg = new JSONObject();
        
        try {
            
            jsDiscMsg = new JSONObject();
            jsDiscMsg.put("sourceAddress",DevelAddr);
            jsDiscMsg.put("MsgType","discovery");
            //jsDiscMsg.put("sourceSS",SSOrigin);
            jsDiscMsg.put("regID", regID);
            //JSONObject jsExp = SJServiceRegistry.getConsumerExpectedServiceType();
            
            //broadcastDiscoveryMessage.put("expServiceType",jsExp.getJSONObject("expectedServiceType"));
            
        } catch (JSONException ex) {
            System.out.println("What happens in ConstructBroadcastDiscoveryMessage: " +ex.getMessage());
        }
        return jsDiscMsg.toString();
    }
            

            
        //});
   // }
    private javax.swing.JTextField textfield = new JTextField();
    private JScrollBar scrollBarVert = new JScrollBar(JScrollBar.VERTICAL);
    private JScrollBar scrollBarHoriz = new JScrollBar(JScrollBar.HORIZONTAL);
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jAutoQueryPeriodField;
    private javax.swing.JLabel jAutoQueryPeriodLabel;
    private javax.swing.JTextField jCDConfigField;
    private javax.swing.JLabel jCDConfigLabel;
    private javax.swing.JTextField jCDNameField;
    private javax.swing.JLabel jCDNameLabel;
    private javax.swing.JTextField jCDServDescField;
    private javax.swing.JLabel jCDServiceDescriptionLabel;
    private javax.swing.JTextField jChanDirField;
    private javax.swing.JLabel jChanDirLabel;
    private javax.swing.JTextField jChanNameField;
    private javax.swing.JLabel jChanNameLabel;
    private javax.swing.JComboBox jCommandChoiceButton;
    private javax.swing.JButton jDiscoverButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jMigSSDestField;
    private javax.swing.JLabel jMigSSDestLabel;
    private javax.swing.JTextField jMigTypeField;
    private javax.swing.JLabel jMigTypeLabel;
    private javax.swing.JTextField jPartChanCDNameField;
    private javax.swing.JLabel jPartChanCDNameLabel;
    private javax.swing.JTextField jPartChanNameField;
    private javax.swing.JLabel jPartChanNameLabel;
    private javax.swing.JScrollPane jRegCDContentScrollField;
    private javax.swing.JTextArea jRegCDField;
    private javax.swing.JTextArea jRegContentField;
    private javax.swing.JScrollPane jRegContentScrollPane;
    private javax.swing.JLabel jSSAddrLabel;
    private javax.swing.JLabel jSSAddrLabel1;
    private javax.swing.JLabel jSSAddrLabel2;
    private javax.swing.JTextField jSSNameField;
    private javax.swing.JLabel jSSNameLabel;
    private javax.swing.JTextField jSSTargetAddressField;
    private javax.swing.JButton jStartAutoQueryButton;
    private javax.swing.JButton jStopAutoQueryButton;
    private javax.swing.JButton jTransmitCommandButton1;
    // End of variables declaration//GEN-END:variables
}
